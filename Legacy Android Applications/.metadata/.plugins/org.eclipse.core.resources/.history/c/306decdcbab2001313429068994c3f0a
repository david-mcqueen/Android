package co.uk.introapps.NinoMilano;

import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;

import android.app.ActionBar;
import android.app.FragmentTransaction;
import android.content.SharedPreferences;
import android.content.pm.ActivityInfo;
import android.database.Cursor;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentActivity;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentPagerAdapter;
import android.support.v4.view.ViewPager;
import android.util.Log;
import android.view.Menu;
import android.view.View;
import android.widget.ExpandableListView;
import android.widget.ExpandableListView.OnChildClickListener;
import android.widget.ExpandableListView.OnGroupClickListener;
import android.widget.ExpandableListView.OnGroupCollapseListener;
import android.widget.ExpandableListView.OnGroupExpandListener;
import android.widget.Toast;

public class MainActivity extends FragmentActivity implements
		ActionBar.TabListener {
	
	public static final String NINO_PREFS = "NinoPrefs";
	private static final String TAG = "Nino-Main Activity";
	
	SectionsPagerAdapter mSectionsPagerAdapter;

	ViewPager mViewPager;
	
	ExpandableListAdapter listAdapter;
    ExpandableListView expListView;
    List<String> listDataHeader;
    HashMap<String, List<String>> listDataChild;
    

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		
		
	    
	    expListView = (ExpandableListView) findViewById(R.id.prices_dropdown);
	    listAdapter = new ExpandableListAdapter(this, listDataHeader, listDataChild);
	    expListView.setAdapter(listAdapter);
			    
		
		Calendar calendar = Calendar.getInstance();
		setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);

		// Set up the action bar.
		final ActionBar actionBar = getActionBar();
		actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_TABS);

		mSectionsPagerAdapter = new SectionsPagerAdapter(
				getSupportFragmentManager());

		mViewPager = (ViewPager) findViewById(R.id.pager);
		mViewPager.setAdapter(mSectionsPagerAdapter);

		mViewPager.setOnPageChangeListener(new ViewPager.SimpleOnPageChangeListener() {
					@Override
					public void onPageSelected(int position) {
						actionBar.setSelectedNavigationItem(position);
					}
				});

		// For each of the sections in the app, add a tab to the action bar.
		for (int i = 0; i < mSectionsPagerAdapter.getCount(); i++) {
			actionBar.addTab(actionBar.newTab()
					.setText(mSectionsPagerAdapter.getPageTitle(i))
					.setTabListener(this));
		}
		
		actionBar.addTab(actionBar.newTab()
				.setIcon(getResources().getDrawable(R.drawable.fb_grey))
				.setCustomView(R.layout.prices_dropdown)
	         	.setTabListener(this));
		
		
		//	---Check if the database should be updated---
		
		//Get the shared preferences
		SharedPreferences preferences = getSharedPreferences(NINO_PREFS, 0);
		boolean previouslyUpdated = preferences.getBoolean("previouslyUpdated", false);
		boolean forceUpdate = preferences.getBoolean("forceUpdate", false);
		int updatedDay = preferences.getInt("updatedDay", 1);
		int dayOfYear = calendar.get(Calendar.DAY_OF_YEAR);
		
		
		//Check to see if there is data in the DB
		String[] projection = {Treatment.TreatmentItem.TREATMENT_ID};
		Cursor c = getContentResolver().query(dbContentProvider.CONTENT_URI_TREATMENT, projection, null, null, Treatment.TreatmentItem.DEFAULT_SORT_ORDER);

		forceUpdate = false;
		
		Log.i(TAG, "Checking if the DB should be updated");
		if(!previouslyUpdated //If it hasn't been previously updated.
				||(dayOfYear - 7) >= updatedDay //Or if the previously updated day was 7 days ago or more
				|| forceUpdate //Or if the user wants to force an update.
				|| c.getCount() < 1) // Or if the treatments table is empty
		{
			Log.i(TAG, "Calling Asycn from Main Activity");
			new UpdateDatabase(getBaseContext()).execute();
			
			//After we have updated, save the new preferences
			SharedPreferences.Editor preferencesEditor = preferences.edit();
			preferencesEditor.putBoolean("previouslyUpdated", true);
			preferencesEditor.putInt("updatedDay", dayOfYear);
			preferencesEditor.putBoolean("forceUpdate", false);
			
			preferencesEditor.commit();
		}
		
		c.close();
		expListView.setOnGroupClickListener(new OnGroupClickListener() {

	         @Override
	         public boolean onGroupClick(ExpandableListView parent, View v,
	                 int groupPosition, long id) {
	             // Toast.makeText(getApplicationContext(),
	             // "Group Clicked " + listDataHeader.get(groupPosition),
	             // Toast.LENGTH_SHORT).show();
	             return false;
	         }
	     });

	     // Listview Group expanded listener
	     expListView.setOnGroupExpandListener(new OnGroupExpandListener() {

	         @Override
	         public void onGroupExpand(int groupPosition) {
	             Toast.makeText(getApplicationContext(),
	                     listDataHeader.get(groupPosition) + " Expanded",
	                     Toast.LENGTH_SHORT).show();
	         }
	     });

	     // Listview Group collasped listener
	     expListView.setOnGroupCollapseListener(new OnGroupCollapseListener() {

	         @Override
	         public void onGroupCollapse(int groupPosition) {
	             Toast.makeText(getApplicationContext(),
	                     listDataHeader.get(groupPosition) + " Collapsed",
	                     Toast.LENGTH_SHORT).show();

	         }
	     });

	     // Listview on child click listener
	     expListView.setOnChildClickListener(new OnChildClickListener() {

	         @Override
	         public boolean onChildClick(ExpandableListView parent, View v,
	                 int groupPosition, int childPosition, long id) {
	             // TODO Auto-generated method stub
	             Toast.makeText(
	                     getApplicationContext(),
	                     listDataHeader.get(groupPosition) + " : "+ listDataChild.get(listDataHeader.get(groupPosition)).get(
	                                     childPosition), Toast.LENGTH_SHORT).show();


	             return false;
	         }
	     });
		
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.settings, menu);
		return true;
	}

	@Override
	public void onTabSelected(ActionBar.Tab tab,
			FragmentTransaction fragmentTransaction) {
		// When the given tab is selected, switch to the corresponding page in
		// the ViewPager.
		mViewPager.setCurrentItem(tab.getPosition());
	}

	@Override
	public void onTabUnselected(ActionBar.Tab tab,
			FragmentTransaction fragmentTransaction) {
	}

	@Override
	public void onTabReselected(ActionBar.Tab tab,
			FragmentTransaction fragmentTransaction) {
	}

	public class SectionsPagerAdapter extends FragmentPagerAdapter {

		public SectionsPagerAdapter(FragmentManager fm) {
			super(fm);
		}

		@Override
		public Fragment getItem(int position) {
			Fragment fragment;
			Bundle args = new Bundle();
			switch (position){
			case 0:
				fragment = new FragmentHome();
				args.putInt(FragmentHome.ARG_SECTION_NUMBER, position);
				fragment.setArguments(args);
				return fragment;
			case 1:				
				fragment = new FragmentPrices();
				args.putInt(FragmentPrices.ARG_SECTION_NUMBER, position);
				fragment.setArguments(args);
				return fragment;
			case 2:
				fragment = new FragmentLoyalty();
				args.putInt(FragmentLoyalty.ARG_SECTION_NUMBER, position);
				fragment.setArguments(args);
				return fragment;
			case 3:
				fragment = new FragmentTestimonials();
				args.putInt(FragmentTestimonials.ARG_SECTION_NUMBER, position);
				fragment.setArguments(args);
				return fragment;
			default:
				fragment = new FragmentHome();
				args.putInt(FragmentHome.ARG_SECTION_NUMBER, position);
				fragment.setArguments(args);
				return fragment;
			}
		}

		@Override
		public int getCount() {
			// How many tabs to show
			return 4;
		}
		
		//Get the title of each of the pages to be displayed
		@Override
		public CharSequence getPageTitle(int position) {
			Locale l = Locale.getDefault();
			switch (position) {
			case 0:
				return getString(R.string.title_Home).toUpperCase(l);
			case 1:
				return getString(R.string.title_Prices).toUpperCase(l);
			case 2:
				return getString(R.string.title_Loyalty).toUpperCase(l);
			case 3:
				return getString(R.string.title_Testimonials).toUpperCase(l);
			}
			return null;
		}
}
	
	public void displayToast (String message){
		Toast.makeText(getBaseContext(), message, Toast.LENGTH_SHORT).show();
	}
	
	public void onPause(){
		super.onPause();
	}
}


