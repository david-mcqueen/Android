package co.uk.introapps.NinoMilano.Background;

import java.util.Calendar;
import java.util.List;

import android.app.Activity;
import android.content.Context;
import android.content.SharedPreferences;
import android.database.Cursor;
import android.os.AsyncTask;
import android.util.Log;
import android.view.View;
import android.widget.ExpandableListView;
import android.widget.ProgressBar;
import co.uk.introapps.NiniMilano.Database.Offer;
import co.uk.introapps.NiniMilano.Database.dbContentProvider;
import co.uk.introapps.NinoMilano.R;
import co.uk.introapps.NinoMilano.Model.PricesCategory;

public class DisplayOffers extends AsyncTask<Void, Void, Void> {
	
	private static final String TAG = "Nino-Async Display Offers";
	
	private final Context mContext;
	private View mRootView;
	private Activity mActivity;
	private List<PricesCategory> catList;
	private static final String NINO_PREFS = "NinoPrefs";

	public DisplayOffers(Context context, View rootView, Activity activity){
		super();
		this.mContext = context;
		this.mRootView = rootView;
		this.mActivity = activity;
	}

	@Override
	protected Void doInBackground(Void... arg0) {
		// TODO Auto-generated method stub
		
		if (DBNeedsUpdating()){
			
		
		}
		return null;
	}
	
	protected void onPostExecute(Void result) {
	     //TODO Trigger an event so that we know the update has completed.
	    	Log.i(TAG, "onPostExecute");
	    	showLoading(false);
	    }
	
	
	private void showLoading(boolean toggle){
		ExpandableListView exList = (ExpandableListView) mRootView.findViewById(R.id.expandableListView1);
		ProgressBar progress = (ProgressBar) mRootView.findViewById(R.id.progressPrices);
		
		if(toggle){
			progress.setVisibility(View.VISIBLE);
			exList.setVisibility(View.INVISIBLE);
		}else{
			populateData();
			progress.setVisibility(View.INVISIBLE);
			exList.setVisibility(View.VISIBLE);
		}
		
	}
	
	private boolean DBNeedsUpdating(){
    	//Checks if the DB should be updated
    	
    	boolean result;
    	
		Calendar calendar = Calendar.getInstance();
		
		//Get the shared preferences
		SharedPreferences preferences = mActivity.getSharedPreferences(NINO_PREFS, 0);
		boolean previouslyUpdated = preferences.getBoolean("previouslyUpdated", false);
		boolean forceUpdate = preferences.getBoolean("forceUpdate", false);
		int updatedDay = preferences.getInt("updatedDay", 1);
		int dayOfYear = calendar.get(Calendar.DAY_OF_YEAR);
		
		//Check to see if there is data in the DB
		String[] projection = {Offer.OfferItem.OFFER_ID};
		Cursor c = mActivity.getContentResolver().query(dbContentProvider.CONTENT_URI_OFFER, projection, null, null, Offer.OfferItem.DEFAULT_SORT_ORDER);

		//TODO Forceupdated used for debugging
		forceUpdate = false;
		
		Log.i(TAG, "Checking if the DB should be updated");
		if(!previouslyUpdated //If it hasn't been previously updated.
				||(dayOfYear - 7) >= updatedDay //Or if the previously updated day was 7 days ago or more
				|| forceUpdate //Or if the user wants to force an update.
				|| c.getCount() < 1) // Or if the treatments table is empty
		{
			
			//After we have updated, save the new preferences
			SharedPreferences.Editor preferencesEditor = preferences.edit();
			preferencesEditor.putBoolean("previouslyUpdated", true);
			preferencesEditor.putInt("updatedDay", dayOfYear);
			preferencesEditor.putBoolean("forceUpdate", false);
			
			preferencesEditor.commit();
			
			result =  true;
		}else{
			result =  false;
		}
		
    	c.close();
    	return result;
    }
    
	private void populateData(){
		
	}

}
